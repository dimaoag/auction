
ssh ${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && docker-compose run --rm api-php-cli wait-for-it api-postgres:5432 --timeout=20 -- echo "api-postgres is up"'
ssh ${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && docker-compose run --rm api-php-cli php bin/app.php migrations:migrate --no-interaction'

docker-compose run --rm api-php-cli composer app orm:validate-schema
docker-compose run --rm api-php-cli composer app mailer:check

docker-compose run --rm api-php-cli composer app migrations:diff
docker-compose run --rm api-php-cli composer app migrations:migrate
docker-compose run --rm api-php-cli php bin/app.php --ansi migrations:migrate --no-interaction



docker login -u USERNAME -p TOKEN docker.pkg.github.com
REGISTRY=docker.pkg.github.com/dimaoag/auction IMAGE_TAG=master-1 make build
REGISTRY=docker.pkg.github.com/dimaoag/auction IMAGE_TAG=master-1 make push

ssh-copy-id -i ~/.ssh/id_rsa.pub root@IP

ansible all -m ping -i hosts.yml

make upgrade
make site
make authorize
cd ..
HOST=user@IP PORT=22 REGISTRY=docker.pkg.github.com/dimaoag/auction IMAGE_TAG=master-1 BUILD_NUMBER=1 make deploy

docker-compose run --rm frontend-node-cli npx create-react-app react-app
docker-compose run --rm frontend-node-cli yarn install
docker-compose run --rm frontend-node-cli yarn build
docker-compose run --rm frontend-node-cli yarn test
docker-compose run --rm frontend-node-cli yarn test --watchAll=false
docker-compose run --rm frontend-node-cli yarn add eslint --dev
docker-compose run --rm frontend-node-cli npx eslint --init

// cucumber
docker-compose run --rm cucumber-node-cli yarn install

// all ENV properties
docker-compose run --rm api-php-cli env

// Testing in test-mode
make try-build


make try-testing-build
make try-testing-init
make try-testing-e2e


========================================================================================================

// Init Jenkins

- git push origin master

- create new job -> enter name -> multibranch pipeline -> ok
    Branch sources -> Github
    Repository HTTPS URL
    Add global credential (Jenkins)
        Kind -> Username with password
        username -> dimaoag
        password ->
            In Github create new personal access token and set this token in password field
                + repo
                + write:packages
                + read:packages
                + admin:repo_hook
                + user
                    + email
        ID -> GitHub
        Description -> GitHub
    Credentials -> choose new created credential GitHub
    Behaviours -> Add -> Prune stale remote-tracking branches
    Script Path -> Jenkinsfile (path to Jenkinsfile)
    + Periodically if not otherwise run -> 1 minute
    Max # of old items to keep -> 20
    Ok

- USER=admin HOST=https://jenkins.groundvn.site make validate-jenkins

- add REGISTRY global credential -> add credentials
    kind -> secret text
    secret -> docker.pkg.github.com/dimaoag/auction
    id -> REGISTRY
    description -> REGISTRY

// IMAGE_TAG = jenkins-auction-feature/blog-1 -> jenkins-auction-feature/blog-1

- add REGISTRY_AUTH global credential -> add credentials
    kind -> username with password
    username -> dimaoag
    password -> secret
    id -> REGISTRY_AUTH
    description -> REGISTRY_AUTH

======> add locally (project) credentials

- add locally PRODUCTION_HOST credential -> add credentials
    kind -> secret text
    secret -> IP server groundvn.site
    id -> PRODUCTION_HOST
    description -> PRODUCTION_HOST

- add locally PRODUCTION_PORT credential -> add credentials
    kind -> secret text
    secret -> 22
    id -> PRODUCTION_PORT
    description -> PRODUCTION_PORT

- cd provisioning
    make generate-deploy-key
    make authorize-deploy

- add locally PRODUCTION_AUTH credential -> add credentials
    kind -> SSH username with private key
    id -> PRODUCTION_AUTH
    description -> PRODUCTION_AUTH
    username -> deploy
    + private key and copy from provisioning/files/deploy_rsa all data and set to field

- add locally API_DB_PASSWORD credential -> add credentials
    kind -> secret text
    secret -> secret
    id -> API_DB_PASSWORD
    description -> API_DB_PASSWORD

- add locally API_MAILER_HOST credential -> add credentials
    kind -> secret text
    secret -> smtp.mailtrap.io
    id -> API_MAILER_HOST
    description -> API_MAILER_HOST

- add locally API_MAILER_PORT credential -> add credentials
    kind -> secret text
    secret -> 2525
    id -> API_MAILER_PORT
    description -> API_MAILER_PORT

- add locally API_MAILER_USER credential -> add credentials
    kind -> secret text
    secret -> secret
    id -> API_MAILER_USER
    description -> API_MAILER_USER

- add locally API_MAILER_PASSWORD credential -> add credentials
    kind -> secret text
    secret -> secret
    id -> API_MAILER_PASSWORD
    description -> API_MAILER_PASSWORD

- add locally API_MAILER_ENCRYPTION credential -> add credentials
    kind -> secret text
    secret -> tls
    id -> API_MAILER_ENCRYPTION
    description -> API_MAILER_ENCRYPTION

- add locally API_MAILER_FROM_EMAIL credential -> add credentials
    kind -> secret text
    secret -> secret
    id -> API_MAILER_FROM_EMAIL
    description -> API_MAILER_FROM_EMAIL

- add locally SENTRY_DSN credential -> add credentials
    kind -> secret text
    secret -> secret
    id -> SENTRY_DSN
    description -> SENTRY_DSN

- install sshagent plugin in Jenkins. settings -> plugins -> search ssh

======== add smtp client for emailing
- settings -> config system -> Extended E-mail Notification
    SMTP server -> smtp.mailtrap.io
    + Use SMTP Authentication
        username -> secret
        password -> secret
        port -> 2525
        default Recipients -> myemail@mail.com

=================================================================

Gitlab CI

add all variables in repository

