
// For Xdebug
http://localhost:8000/apiusers?XDEBUG_SESSION_START=PHPSTORM


ssh ${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && docker-compose run --rm api-php-cli wait-for-it api-postgres:5432 --timeout=20 -- echo "api-postgres is up"'
ssh ${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && docker-compose run --rm api-php-cli php bin/app.php migrations:migrate --no-interaction'

docker-compose run --rm api-php-cli composer app orm:validate-schema
docker-compose run --rm api-php-cli composer app mailer:check

docker-compose run --rm api-php-cli composer app migrations:diff
docker-compose run --rm api-php-cli composer app migrations:migrate
docker-compose run --rm api-php-cli php bin/app.php --ansi migrations:migrate --no-interaction



docker login -u USERNAME -p TOKEN docker.pkg.github.com
REGISTRY=docker.pkg.github.com/dimaoag/auction IMAGE_TAG=master-1 make build
REGISTRY=docker.pkg.github.com/dimaoag/auction IMAGE_TAG=master-1 make push

ssh-copy-id -i ~/.ssh/id_rsa.pub root@IP

apt-get update
apt-get upgrade

ansible all -m ping -i hosts.yml

make upgrade
make site
make authorize-deploy
make docker-login
cd ..
HOST=user@IP PORT=22 REGISTRY=docker.pkg.github.com/dimaoag/auction IMAGE_TAG=master-1 BUILD_NUMBER=1 make deploy

docker-compose run --rm frontend-node-cli npx create-react-app react-app
docker-compose run --rm frontend-node-cli yarn install
docker-compose run --rm frontend-node-cli yarn build
docker-compose run --rm frontend-node-cli yarn test
docker-compose run --rm frontend-node-cli yarn test --watchAll=false
docker-compose run --rm frontend-node-cli yarn add eslint --dev
docker-compose run --rm frontend-node-cli npx eslint --init

// cucumber
docker-compose run --rm cucumber-node-cli yarn install

// all ENV properties
docker-compose run --rm api-php-cli env

// Testing in test-mode
make try-build


make try-testing-build
make try-testing-init
make try-testing-e2e


========================================================================================================

// Init Jenkins

- git push origin master

- create new job -> enter name -> multibranch pipeline -> ok
    Branch sources -> Github
    Repository HTTPS URL -> https://github.com/dimaoag/auction
    Add global credential (Jenkins)
        Kind -> Username with password
        username -> dimaoag
        password ->
            In Github create new personal access token and set this token in password field
                + repo
                + write:packages
                + read:packages
                + admin:repo_hook
                + user
                    + email
        ID -> GitHub
        Description -> GitHub
    Credentials -> choose new created credential GitHub
    Behaviours -> Add -> Prune stale remote-tracking branches
    Script Path -> Jenkinsfile (path to Jenkinsfile)
    + Periodically if not otherwise run -> 1 minute
    Days to keep old items -> 5
    Max # of old items to keep -> 5
    Ok

- USER=admin HOST=https://jenkins.groundvn.site make validate-jenkins

- add REGISTRY global credential -> add credentials
    kind -> secret text
    secret -> docker.pkg.github.com/dimaoag/auction
    id -> REGISTRY
    description -> REGISTRY

// IMAGE_TAG = jenkins-auction-feature/blog-1 -> jenkins-auction-feature/blog-1
// jenkins-auction-master-42
// docker.pkg.github.com/dimaoag/auction/auction-api:jenkins-auction-master-8

- add REGISTRY_AUTH global credential -> add credentials
    kind -> username with password
    username -> dimaoag
    password -> secret
    id -> REGISTRY_AUTH
    description -> REGISTRY_AUTH

======> add locally (project) credentials

- add locally PRODUCTION_HOST credential -> add credentials
    kind -> secret text
    secret -> IP server groundvn.site (46.101.187.75)
    id -> PRODUCTION_HOST
    description -> PRODUCTION_HOST

- add locally PRODUCTION_PORT credential -> add credentials
    kind -> secret text
    secret -> 22
    id -> PRODUCTION_PORT
    description -> PRODUCTION_PORT

- cd provisioning
    make generate-deploy-key
    make authorize-deploy

- add locally PRODUCTION_AUTH credential -> add credentials
    kind -> SSH username with private key
    id -> PRODUCTION_AUTH
    description -> PRODUCTION_AUTH
    username -> deploy
    + private key and copy from provisioning/files/deploy_rsa all data and set to field

- add locally API_DB_PASSWORD credential -> add credentials
    kind -> secret text
    secret -> secret
    id -> API_DB_PASSWORD
    description -> API_DB_PASSWORD

- add locally API_MAILER_HOST credential -> add credentials
    kind -> secret text
    secret -> smtp.mailtrap.io
    id -> API_MAILER_HOST
    description -> API_MAILER_HOST

- add locally API_MAILER_PORT credential -> add credentials
    kind -> secret text
    secret -> 2525
    id -> API_MAILER_PORT
    description -> API_MAILER_PORT

- add locally API_MAILER_USER credential -> add credentials
    kind -> secret text
    secret -> secret
    id -> API_MAILER_USER
    description -> API_MAILER_USER

- add locally API_MAILER_PASSWORD credential -> add credentials
    kind -> secret text
    secret -> secret
    id -> API_MAILER_PASSWORD
    description -> API_MAILER_PASSWORD

- add locally API_MAILER_ENCRYPTION credential -> add credentials
    kind -> secret text
    secret -> tls
    id -> API_MAILER_ENCRYPTION
    description -> API_MAILER_ENCRYPTION

- add locally API_MAILER_FROM_EMAIL credential -> add credentials
    kind -> secret text
    secret -> secret
    id -> API_MAILER_FROM_EMAIL
    description -> API_MAILER_FROM_EMAIL

- add locally SENTRY_DSN credential -> add credentials
    kind -> secret text
    secret -> secret
    id -> SENTRY_DSN
    description -> SENTRY_DSN

- install sshagent plugin in Jenkins. settings -> plugins -> search ssh

======== add smtp client for emailing
- settings -> config system -> Extended E-mail Notification
    SMTP server -> smtp.mailtrap.io
    + Use SMTP Authentication
        username -> secret
        password -> secret
        port -> 2525
        default Recipients -> myemail@mail.com

========================================================================

// First manual deploy

deploy:
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'rm -rf site_${BUILD_NUMBER}'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'mkdir site_${BUILD_NUMBER}'
	scp -o StrictHostKeyChecking=no -P ${PORT} docker-compose-production.yml deploy@${HOST}:site_${BUILD_NUMBER}/docker-compose.yml
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && echo "COMPOSE_PROJECT_NAME=auction" >> .env'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && echo "REGISTRY=${REGISTRY}" >> .env'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && echo "IMAGE_TAG=${IMAGE_TAG}" >> .env'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && echo "API_DB_PASSWORD=${API_DB_PASSWORD}" >> .env'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && echo "API_MAILER_HOST=${API_MAILER_HOST}" >> .env'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && echo "API_MAILER_PORT=${API_MAILER_PORT}" >> .env'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && echo "API_MAILER_USER=${API_MAILER_USER}" >> .env'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && echo "API_MAILER_PASSWORD=${API_MAILER_PASSWORD}" >> .env'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && echo "API_MAILER_FROM_EMAIL=${API_MAILER_FROM_EMAIL}" >> .env'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && echo "SENTRY_DSN=${SENTRY_DSN}" >> .env'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && docker-compose pull'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && docker-compose up --build -d api-postgres api-php-cli'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && docker-compose run api-php-cli wait-for-it api-postgres:5432 --timeout=30 -- echo "api-postgres is up"'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && docker-compose run api-php-cli php bin/app.php migrations:migrate --no-interaction'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'cd site_${BUILD_NUMBER} && docker-compose up --build --remove-orphans -d'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'rm -f site'
	ssh -o StrictHostKeyChecking=no deploy@${HOST} -p ${PORT} 'ln -sr site_${BUILD_NUMBER} site'




========================================================================

// Docker Swarm

deploy:
    mode: replicated  (global -> 1 server = 1 instance, replicated -> random (default value))
    replicas: 2 - count of instance
    update_config:
        parallelism: 1 - updating per one
        delay: 10s - updating after 10s from starting prev service
    placement:
        constraints: [node.role == manager] - on which server will be located
    endpoint_mode: dnsrr - network mode DNS RR

    default network in docker VIP (virtual IP) life to 10 min for each request

                  / frontend
    gateway ---->               DNS RR
                  \ frontend

                       / frontend
    gateway ----> [VIP]            (life IP address to 10min)
                       \ frontend


docker node ls  // show all managers and workers
docker service ls // show all services
docker service ps auction_api-php-fpm // show one service

// for remove some worker
docker node update --availability drain worker-1 ["active", "pause", "drain" - relocate all services from thim server] // one value
docker node demote worker-1
docker node rm --force worker-1


=====================================================================================

// Composer update

docker-compose run --rm api-php-cli composer outdated     // show all available new versions
docker-compose run --rm api-php-cli composer outdated --direct    // only our from composer.json

docker-compose run --rm api-php-cli composer update --with-dependencies slim/psr7 slim/slim
docker-compose run --rm api-php-cli composer require --with-all-dependencies sentry/sdk

docker-compose run --rm api-php-cli composer update --with-dependencies "symfony/*"
docker-compose run --rm api-php-cli composer update --with-dependencies "doctrine/*"

docker-compose run --rm api-php-cli composer require --dev phpunit/phpunit
docker-compose run --rm api-php-cli composer remove --dev phpunit/phpunit
docker-compose run --rm api-php-cli composer require --dev phpunit/phpunit

docker-compose run --rm api-php-cli composer require --dev overtrue/phplint
docker-compose run --rm api-php-cli composer require ramsey/uuid

docker-compose run --rm api-php-cli composer why guzzlehttp/guzzle  // where is used this package

docker-compose run --rm api-php-cli composer update



=====================================================================================

// Yarn update

docker-compose run --rm frontend-node-cli yarn upgrade

docker-compose run --rm frontend-node-cli yarn outdated

docker-compose run --rm frontend-node-cli yarn add -s --dev eslint    // upgrade new major version
docker-compose run --rm frontend-node-cli yarn add -s react react-dom react-scripts

docker-compose run --rm frontend-node-cli yarn remove eslint  // remove package

docker-compose run --rm frontend-node-cli yarn add -s --dev @testing-library/jest-dom @testing-library/react @testing-library/user-event

docker-compose run --rm cucumber-node-cli yarn upgrade
docker-compose run --rm cucumber-node-cli yarn outdated
docker-compose run --rm cucumber-node-cli yarn add -s --dev eslint
docker-compose run --rm cucumber-node-cli yarn add -s puppeteer